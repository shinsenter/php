################################################################################
# The setups in this file belong to the project https://code.shin.company/php
# I appreciate you respecting my intellectual efforts in creating them.
# If you intend to copy or use ideas from this project, please credit properly.
# Author:  SHIN Company <shin@shin.company>
# License: https://code.shin.company/php/blob/main/LICENSE
################################################################################

name: Build Template

################################################################################
################################################################################

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      php_version:
        required: false
        type: string
        default: ""
      server:
        required: false
        type: string
        default: ""
      os:
        required: false
        type: string
        default: alpine
      os_version:
        required: false
        type: string
        default: latest
      tag_prefix:
        required: false
        type: string
        default: ""
    secrets:
      DOCKER_HUB_ACCESS_TOKEN:
        required: true
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_PASSWORD:
        required: true

################################################################################
################################################################################

jobs:
  build:
    name: ${{ inputs.php_version }} ${{ inputs.app_name }} ${{ inputs.server }} ${{ inputs.os }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - '5000:5000'
    env:
      ARCHIVES_REPO: "shinsenter/php-archives"
      DOCKER_BUILD_RECORD_UPLOAD: false
      DOCKER_BUILD_SUMMARY: false
      DOCKER_BUILDKIT: "1"
      PUBLISH_TO_GHCR: "1"
      USE_BUILD_CACHE: "0"
    steps:
      -
        if: ${{ !env.SKIP_BUILD }}
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      -
        name: Generate build config
        run: |
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export DOCKERHUB_TOKEN="${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          export BUILD_TAG_PREFIX="${{ inputs.tag_prefix }}"
          ./build/config.sh "${{ inputs.os }}" "${{ inputs.app_name }}" "${{ inputs.php_version }}" "${{ inputs.server }}"

      -
        id: cache
        if: ${{ !env.SKIP_BUILD }}
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_CACHE_PATH }}
          key: ${{ runner.os }}-${{ env.BUILD_CACHE_KEY }}
          # restore-keys: ${{ runner.os }}-

      -
        if: ${{ !env.SKIP_BUILD && env.USE_BUILD_CACHE != '1' && steps.cache.outputs.cache-hit == 'true' }}
        name: Skip building ${{ env.BUILD_TAG }}
        run: echo "SKIP_BUILD=1" >> $GITHUB_ENV

      -
        if: ${{ !env.SKIP_BUILD }}
        name: Cleanup before building ${{ env.BUILD_TAG }}
        run: |
          sudo swapoff -a || true
          sudo rm -f /mnt/swapfile || true
          free -h
          df -h

      -
        if: ${{ !env.SKIP_BUILD }}
        uses: docker/setup-qemu-action@v3

      -
        if: ${{ !env.SKIP_BUILD }}
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      -
        if: ${{ !env.SKIP_BUILD }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      -
        if: ${{ !env.SKIP_BUILD && env.PUBLISH_TO_GHCR }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        if: ${{ !env.SKIP_BUILD && env.SKIP_SQUASH == '1' }}
        name: Build and push ${{ env.BUILD_TAG }} using ${{ env.OS_BASE }}
        uses: docker/build-push-action@v6
        with:
          pull: false
          push: ${{ !env.SKIP_PUSH }}
          platforms: ${{ env.BUILD_PLATFORM }}
          file: ${{ env.BUILD_DOCKERFILE }}
          context: ${{ env.BUILD_CONTEXT }}
          tags: ${{ env.BUILD_TAGS }}
          sbom: true
          build-args: |
            BUILD_CACHE_KEY=${{ env.BUILD_CACHE_KEY }}
            BUILD_CACHE_PATH=${{ env.BUILD_CACHE_PATH }}
            BUILD_CONTEXT=${{ env.BUILD_CONTEXT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_DESC=${{ env.BUILD_DESC }}
            BUILD_FROM_IMAGE=${{ env.BUILD_FROM_IMAGE }}
            BUILD_NAME=${{ env.BUILD_NAME }}
            BUILD_PLATFORM=${{ env.BUILD_PLATFORM }}
            BUILD_REVISION=${{ env.BUILD_REVISION }}
            BUILD_SOURCE_IMAGE=${{ env.BUILD_SOURCE_IMAGE }}
            BUILD_TAG_PREFIX=${{ env.BUILD_TAG_PREFIX }}
            BUILD_TAG=${{ env.BUILD_TAG }}
            BUILD_TAGS=${{ env.BUILD_TAGS }}
            LATEST_PHP=${{ env.LATEST_PHP }}
            LATEST_S6=${{ env.LATEST_S6 }}
            OS_BASE=${{ env.OS_BASE }}
            OS_VERSION=${{ env.OS_VERSION }}
            PHP_VARIANT=${{ env.PHP_VARIANT }}
            PHP_VERSION=${{ env.PHP_VERSION }}
            S6_PATH=${{ env.S6_PATH }}
            S6_VERSION=${{ env.S6_VERSION }}
          cache-from: type=gha,scope=${{ env.BUILD_TAG_PREFIX }}build-${{ inputs.php_version }}@${{ inputs.os }}
          cache-to: type=gha,mode=max,scope=${{ env.BUILD_TAG_PREFIX }}build-${{ inputs.php_version }}@${{ inputs.os }}
          # cache-from: type=local,src=${{ env.BUILD_CACHE_PATH }}
          # cache-to: type=local,dest=${{ env.BUILD_CACHE_PATH }}-new,mode=max

      -
        if: ${{ !env.SKIP_BUILD && !env.SKIP_SQUASH }}
        name: Build ${{ env.BUILD_TAG }} using ${{ env.OS_BASE }}
        uses: docker/build-push-action@v6
        with:
          pull: false
          push: true
          platforms: ${{ env.BUILD_PLATFORM }}
          file: ${{ env.BUILD_DOCKERFILE }}
          context: ${{ env.BUILD_CONTEXT }}
          tags: ${{ env.BUILD_TMP_NAME }}
          sbom: true
          build-args: |
            BUILD_CACHE_KEY=${{ env.BUILD_CACHE_KEY }}
            BUILD_CACHE_PATH=${{ env.BUILD_CACHE_PATH }}
            BUILD_CONTEXT=${{ env.BUILD_CONTEXT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_DESC=${{ env.BUILD_DESC }}
            BUILD_FROM_IMAGE=${{ env.BUILD_FROM_IMAGE }}
            BUILD_NAME=${{ env.BUILD_NAME }}
            BUILD_PLATFORM=${{ env.BUILD_PLATFORM }}
            BUILD_REVISION=${{ env.BUILD_REVISION }}
            BUILD_SOURCE_IMAGE=${{ env.BUILD_SOURCE_IMAGE }}
            BUILD_TAG_PREFIX=${{ env.BUILD_TAG_PREFIX }}
            BUILD_TAG=${{ env.BUILD_TAG }}
            BUILD_TAGS=${{ env.BUILD_TAGS }}
            LATEST_PHP=${{ env.LATEST_PHP }}
            LATEST_S6=${{ env.LATEST_S6 }}
            OS_BASE=${{ env.OS_BASE }}
            OS_VERSION=${{ env.OS_VERSION }}
            PHP_VARIANT=${{ env.PHP_VARIANT }}
            PHP_VERSION=${{ env.PHP_VERSION }}
            S6_PATH=${{ env.S6_PATH }}
            S6_VERSION=${{ env.S6_VERSION }}
          cache-from: type=gha,scope=${{ env.BUILD_TAG_PREFIX }}build-${{ inputs.php_version }}@${{ inputs.os }}
          cache-to: type=gha,mode=max,scope=${{ env.BUILD_TAG_PREFIX }}build-${{ inputs.php_version }}@${{ inputs.os }}
          # cache-from: type=local,src=${{ env.BUILD_CACHE_PATH }}
          # cache-to: type=local,dest=${{ env.BUILD_CACHE_PATH }}-new,mode=max

      -
        if: ${{ !env.SKIP_BUILD && !env.SKIP_SQUASH }}
        name: Make squashed Dockerfile for ${{ env.BUILD_TAG }}
        run: |
          # docker system prune -a --volumes -f
          docker pull "${{ env.BUILD_TMP_NAME }}"
          DEBUG= ${{ env.SQUASH_CMD }} "${{ env.BUILD_TMP_NAME }}" -p >"${{ env.BUILD_DOCKERFILE_SQUASHED }}"
          cat "${{ env.BUILD_DOCKERFILE_SQUASHED }}"
          df -h

      -
        if: ${{ !env.SKIP_BUILD && !env.SKIP_SQUASH }}
        name: Squash and push ${{ env.BUILD_TAG }} using ${{ env.OS_BASE }}
        uses: docker/build-push-action@v6
        with:
          pull: false
          push: ${{ !env.SKIP_PUSH }}
          platforms: ${{ env.BUILD_PLATFORM }}
          file: ${{ env.BUILD_DOCKERFILE_SQUASHED }}
          context: ${{ env.BUILD_CONTEXT }}
          tags: ${{ env.BUILD_TAGS }}
          sbom: true
          build-args: |
            PRESQUASH_SCRIPTS=cleanup

      -
        if: ${{ env.BUILD_README != '' && env.UPDATE_README == '1' }}
        name: Update ${{ env.BUILD_NAME }}/README.md
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ${{ env.BUILD_NAME }}
          short-description: '${{ env.BUILD_DESC }}'
          readme-filepath: ${{ env.BUILD_README }}

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        if: ${{ !env.SKIP_BUILD && env.USE_BUILD_CACHE == '1' }}
        name: Move local cache
        run: |
          rm -rf ${{ env.BUILD_CACHE_PATH }}
          mv ${{ env.BUILD_CACHE_PATH }}-new ${{ env.BUILD_CACHE_PATH }}
          df -h
