#!/usr/bin/env sh
################################################################################
#     These setups are part of the project: https://code.shin.company/php
#     Please respect the intellectual effort that went into creating them.
#     If you use or copy these ideas, proper credit would be appreciated.
#      - Author:  Mai Nhut Tan <shin@shin.company>
#      - License: https://code.shin.company/php/blob/main/LICENSE
################################################################################
if [ "$(id -u)" != "0" ]; then debug-echo -c "Please run this container as the root user!" >&2; exit 1; fi

debug-echo -d "Starting container ${DOCKER_NAME:-$(hostname)}."

# detect user-defined entrypoint
if [ -n "$SUPERVISOR_PHP_COMMAND" ]; then
    debug-echo "Start container with user-defined command: $SUPERVISOR_PHP_COMMAND"
    set -- $SUPERVISOR_PHP_COMMAND
fi

################################################################################
set -e

# set timezone
export TZ="${TZ:=UTC}"
if [ -n "$TZ" ] && [ -f "/usr/share/zoneinfo/$TZ" ]; then
    ln -nsf "/usr/share/zoneinfo/$TZ" /etc/localtime
    echo "$TZ" >/etc/timezone
fi

# fix ownership
ownership "${APP_GROUP:-www-data}" "${APP_GID:-}" "${APP_USER:-www-data}" "${APP_UID:-}"

# ensure application directory exist
web-mkdir "/var/www" "$(app-path)"
cd "$(app-path)"

################################################################################
# container boot hooks
FIRST_RUN_FLAG="/var/local/first-run"
if [ ! -e "$FIRST_RUN_FLAG" ]; then
    date > "$FIRST_RUN_FLAG"
    hook first-run
else
    hook rebooted
fi

hook onboot

################################################################################
# load the $ENV in ~/.bashrc
env_check='if [ -f "$ENV" ]; then source "$ENV" &>/dev/null; fi'
user_profile="$(realpath -mqs "$(getent passwd "${APP_USER:-www-data}" | cut -d: -f6)/.bashrc")"
if [ -n "$user_profile" ]; then web-mkdir "$(dirname "$user_profile")"; fi
for profile in "$user_profile" /root/.bashrc; do
    if [ -z "$profile" ]; then continue; fi
    touch "$profile"
    if ! grep -qF -- "$env_check" "$profile"; then
        tmp_file="$(mktemp)"
        {
            echo "# load environment variables"
            echo "$env_check"
            echo ""
            cat "$profile"
        } >"$tmp_file"
        mv -f "$tmp_file" "$profile"
    fi
done

# export all env variables for PHP
if is-true "$ALLOW_RUNTIME_PHP_ENVVARS" && has-cmd php && has-cmd php-envvars; then
    debug-echo "Export all env variables for PHP."
    php-envvars export_envvars 2>&1
fi

################################################################################
# fallback for docker-php-entrypoint
if [ -x "/init" ]; then set -- /init "$@"; fi

# fallback empty entrypoint
if [ "$#" -eq 0 ]; then set -- /bin/sh; fi

# run bootstrap hooks to initialize the container
hook bootstrap $(! has-s6 && echo bootstrap-non-s6) \
    post-boot  $(! has-s6 && echo post-boot-non-s6) \
    application server \
    migration \
    onready

# run hooks on exit (beta)
trap "hook onexit" SIGINT SIGTERM SIGKILL SIGQUIT EXIT

# activity logging
touch /var/log/startup.log
echo "$(date) $(whoami)@$(hostname):$(pwd)\$ ${0##*/} $@" >>/var/log/startup.log

# start the container
exec in-app "$@"

################################################################################
#     These setups are part of the project: https://code.shin.company/php
#     Please respect the intellectual effort that went into creating them.
#     If you use or copy these ideas, proper credit would be appreciated.
################################################################################
