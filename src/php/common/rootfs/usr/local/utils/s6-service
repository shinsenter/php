#!/usr/bin/env sh
################################################################################
#     These setups are part of the project: https://code.shin.company/php
#     Please respect the intellectual effort that went into creating them.
#     If you use or copy these ideas, proper credit would be appreciated.
#      - Author:  Mai Nhut Tan <shin@shin.company>
#      - License: https://code.shin.company/php/blob/main/LICENSE
################################################################################
# service dirs
s6="/etc/s6-overlay/s6-rc.d"
disabled_s6="/etc/s6-overlay/s6-rc.d.disabled"

# show help if no args or help flag
case "$1" in
""|-h|--help|help)
    debug-echo -i "Simple wrapper for adding s6-overlay services."
    debug-echo -i "Usage: ${0##*/} [name] [type] [script path|inline script]"
    debug-echo -l "  Example: ${0##*/} greeting oneshot \"echo 'hello world!'\""
    debug-echo -l "  Example: ${0##*/} apache longrun /path/to/apache/start.sh"
    debug-echo -l "  Example: ${0##*/} apache needs php-fpm"
    exit 1
    ;;
esac

# slugify string: lowercase, replace invalid chars with '-', trim '-'
slugify() {
    tr '[:upper:]' '[:lower:]' <<EOF | \
    sed -e 's/[^a-z0-9.~][^a-z0-9.~]*/-/g' -e 's/^-*//' -e 's/-*$//'
$1
EOF
}

# create file with optional content
create() {
    path=$1; dir=$(dirname "$path"); shift
    mkdir -p "$dir" && chmod 0755 "$dir"
    : >"$path" && chmod 0755 "$path"
    if [ "$#" -gt 0 ]; then
        printf '%b\n' "$*" >"$path"
    fi
}

############################################################
# set defaults
[ -n "$1" ] && name=$(slugify "$1") && shift || name="00-default"
[ -n "$1" ] && type=$1 && shift || type="oneshot"

# remove '~' from name for hook
hook_name="s6-exit-$(printf '%s' "$name" | tr -d '~')"
svc_path="${s6}/${name}"
deps_path="${s6}/${name}/dependencies.d"
flag_path="${s6}/user/contents.d/${name}"

# load file content if param is a file
[ -n "$1" ] && [ -f "$1" ] && set -- "$(cat "$1")"

# handle simple commands
case "$type" in
enable)
    if [ -d "${disabled_s6}/${name}" ]; then
        mv "${disabled_s6}/${name}" "${s6}/"
        create "${flag_path}"
    fi
    exit $?
    ;;
disable)
    mkdir -p "${disabled_s6}"
    [ -d "${s6}/${name}" ] && mv "${s6}/${name}" "${disabled_s6}/"
    \rm -rf "${flag_path}"
    exit $?
    ;;
isset|exists|depends)
    [ "$#" -eq 0 ] && [ -f "${svc_path}/run" ] && exit 0
    for dep in "$@"; do
       [ -n "$dep" ] && [ -f "${deps_path}/${dep}" ] && exit 0
    done
    exit 1
    ;;
requires|needs)
    create "${deps_path}/$1"
    exit $?
    ;;
down|finish)
    create "${svc_path}/${type}" "$@"
    exit $?
    ;;
unset|delete)
    if [ "$#" -eq 0 ]; then
        \rm -rf "${svc_path}" "${flag_path}" 2>/dev/null || true
    else
        for dep in "$@"; do
           [ -n "$dep" ] && \rm -f "${deps_path}/${dep}" 2>/dev/null || true
        done
    fi
    exit 0
    ;;
esac

############################################################
# service generation
debug-echo -i "Creating s6 service: ${name} (${type})."

if [ "$type" = "oneshot" ]; then
    create "${svc_path}/up"   "exec ${svc_path}/run"
    create "${svc_path}/down" "exec hook ${hook_name}"
fi

if [ "$type" = "longrun" ]; then
    create "${svc_path}/finish" "#!/usr/bin/env sh
exec hook ${hook_name}"
fi

# common files
create "${svc_path}/type" "$type"
create "${svc_path}/run" "$@"
create "${deps_path}/base"
create "${flag_path}"

exit 0
