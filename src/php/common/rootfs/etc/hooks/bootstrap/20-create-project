#!/usr/bin/env sh
################################################################################
#     These setups are part of the project: https://code.shin.company/php
#     Please respect the intellectual effort that went into creating them.
#     If you use or copy these ideas, proper credit would be appreciated.
#      - Author:  SHIN Company <shin@shin.company>
#      - License: https://code.shin.company/php/blob/main/LICENSE
################################################################################
if ! has-cmd php; then exit 0; fi

ENV_PATH="$APP_PATH/.env"
CONF_PATH="$APP_PATH/composer.json"

has_composer="$(has-cmd composer && echo 1 || echo 0)"
recently_created="0"

################################################################################

install_deps() {
    [ -f "$CONF_PATH" ] || return 0

    deps=""
    [ "$(is-true "$COMPOSER_REQUIRES_GIT")" = "1" ] || grep -qF -- '"git"' "$CONF_PATH" && deps="$deps git"
    [ "$(is-true "$COMPOSER_REQUIRES_NODEJS")" = "1" ] || grep -qF -- 'node ' "$CONF_PATH" && deps="$deps nodejs"
    [ "$(is-true "$COMPOSER_REQUIRES_NPM")" = "1" ] || grep -qF -- 'npm ' "$CONF_PATH" && deps="$deps npm"

    [ -n "$deps" ] && pkg-add $deps

    cd "$APP_PATH"
    has-cmd git && git config --global --add safe.directory "$APP_PATH" || true
    has-cmd npm && [ -f ./package.json ] && [ ! -d ./node_modules ] && npm install || true
}

composer_exec() {
    [ "$has_composer" -eq 1 ] && composer "$@"
}

composer_hook() {
    [ -n "$1" ] || return
    local hook="$1"
    [ -f "$CONF_PATH" ] && grep -qF -- "\"$hook\"" "$CONF_PATH" && {
        composer_exec run "$@"
        hook "$hook"
    }
}

allow_plugins() {
    composer_exec config -n --no-plugins "allow-plugins.*/*" true >/dev/null 2>&1 || true
}

unset_allow_plugins() {
    composer_exec config -n --unset "allow-plugins.*/*" >/dev/null 2>&1 || true
}

copy_env() {
    [ -f "$ENV_PATH" ] && return
    for source in .env.example .env.local .env.*; do
        [ -f "$APP_PATH/$source" ] && {
            echo "Found: $source. Copying to .env..."
            cp -pf "$APP_PATH/$source" "$ENV_PATH"
            break
        }
    done
}

# download a zip/tar.gz project and extract to dest
download_and_extract() {
    local url="$1"
    local dest="$2"

    if echo "$url" | grep -qE '\.zip$'; then
        filename="/tmp/${url##*/}"
        tmp="/tmp/project-unpack-$(php -r 'echo uniqid();')"
        mkdir -p "$tmp"
        download "$url" -o "$filename" && unzip "$filename" -d "$tmp"
        [ "$(ls -1 "$tmp" | wc -l)" = "1" ] && tmp="$tmp/$(ls -1 "$tmp")"
        cp -rpn "$tmp"/. "$dest"/ &>/dev/null || cp -pn "$tmp"/* "$dest"/ &>/dev/null
        rm -rf "$tmp" "$filename"
    else
        download "$url" | tar -xzv --strip-components=1 -C "$dest"
    fi
}

################################################################################

web-mkdir "$APP_PATH" "$COMPOSER_HOME"
cd "$APP_PATH"

################################################################################

# case 1: project directory is empty
if [ -z "$(ls -A "$APP_PATH")" ]; then
    if [ -n "$INITIAL_PROJECT" ] && ! is-true "$DISABLE_AUTORUN_CREATING_PROJECT"; then
        hook pre-create-project

        case "$INITIAL_PROJECT" in
            http*.tar.gz | http*.zip)
                debug-echo "Downloading $INITIAL_PROJECT to $APP_PATH."
                download_and_extract "$INITIAL_PROJECT" "$APP_PATH"
                ;;
            */*)
                debug-echo "Installing project $INITIAL_PROJECT to $APP_PATH."
                composer_exec create-project $COMPOSER_CREATE_OPTIONS \
                    -n --no-secure-http --no-install --no-scripts \
                    -- "$INITIAL_PROJECT" "$APP_PATH"
                ;;
            *)
                hook create-project
                ;;
        esac

        composer_hook post-root-package-install
        hook post-create-project

        web-chown "Project created in $APP_PATH."
    fi

    if [ -d /source/ ] && ! is-true "$DISABLE_AUTORUN_COPYING_SOURCE"; then
        debug-echo "Copying files from /source/ to $APP_PATH."
        cp -rpn /source/. "$APP_PATH"/
        web-chown "Copied files from /source/ to $APP_PATH"
    fi

    install_deps
    allow_plugins
    copy_env

    if [ -f "$CONF_PATH" ]; then
        if composer_exec update --help | grep -qF -- '--bump-after-update'; then
            COMPOSER_UPDATE_OPTIONS="$COMPOSER_UPDATE_OPTIONS --bump-after-update"
        fi

        debug-echo "Updating required packages in $APP_PATH."

        hook pre-update-packages
        composer_exec update -n -W $COMPOSER_UPDATE_OPTIONS
        hook post-update-packages

        web-chown "Required packages in $APP_PATH were updated."
    fi

    composer_hook post-create-project-cmd
    unset_allow_plugins
    recently_created="1"
else
    debug-echo "Skip project creation because $APP_PATH is not empty."
fi

################################################################################

# case 2: project exists but vendor missing
if [ "$recently_created" -ne 1 ] && [ "$has_composer" -eq 1 ] && ! is-true "$DISABLE_AUTORUN_COMPOSER_INSTALL"; then
    if [ -f "$CONF_PATH" ]; then
        vendor_dir="$APP_PATH/$(composer_exec config vendor-dir 2>/dev/null)"
        if [ ! -d "$vendor_dir" ] || [ ! -e "$vendor_dir/composer/ClassLoader.php" ]; then
            install_deps
            allow_plugins
            copy_env

            hook pre-install-packages
            composer_exec install -n $COMPOSER_INSTALL_OPTIONS
            hook post-install-packages

            unset_allow_plugins
            web-chown "Composer packages were installed in $APP_PATH"
        fi
    else
        debug-echo "Skip composer install because $CONF_PATH is missing."
    fi
fi

################################################################################

# optional autoload optimization
if [ "$has_composer" -eq 1 ] && is-true "${COMPOSER_OPTIMIZE_AUTOLOADER:-}"; then
    allow_plugins

    hook pre-autoload-dump
    composer_exec dumpautoload -n -o --no-cache
    hook post-autoload-dump

    unset_allow_plugins
fi
